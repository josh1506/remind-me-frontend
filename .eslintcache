[{"E:\\Projects\\RemindMe\\remind-me-frontend\\src\\index.jsx":"1","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\app.jsx":"2","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\nav.jsx":"3","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\header.jsx":"4","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\body.jsx":"5","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\common\\formClass.jsx":"6","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspacePage.jsx":"7","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\profile.jsx":"8","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\landingPage.jsx":"9","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\landingPageCommon\\login.jsx":"10","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\landingPageCommon\\register.jsx":"11","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\landingPageCommon\\forgotpass.jsx":"12","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\common\\carouselFunc.jsx":"13","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspace\\sidebar.jsx":"14","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspace\\status.jsx":"15","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspace\\taskTable.jsx":"16","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspace\\taskBody.jsx":"17","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\todoPage.jsx":"18","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\todoPage\\todo.jsx":"19","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\todoPage\\todoTask.jsx":"20"},{"size":196,"mtime":1608229825854,"results":"21","hashOfConfig":"22"},{"size":258,"mtime":1608231538273,"results":"23","hashOfConfig":"22"},{"size":1961,"mtime":1608404254246,"results":"24","hashOfConfig":"22"},{"size":207,"mtime":1608230364620,"results":"25","hashOfConfig":"22"},{"size":449,"mtime":1610540489790,"results":"26","hashOfConfig":"22"},{"size":749,"mtime":1608801629458,"results":"27","hashOfConfig":"22"},{"size":973,"mtime":1608626762015,"results":"28","hashOfConfig":"22"},{"size":5756,"mtime":1608626561713,"results":"29","hashOfConfig":"22"},{"size":805,"mtime":1610540522274,"results":"30","hashOfConfig":"22"},{"size":2518,"mtime":1608800066615,"results":"31","hashOfConfig":"22"},{"size":3327,"mtime":1608815198610,"results":"32","hashOfConfig":"22"},{"size":1301,"mtime":1608314481644,"results":"33","hashOfConfig":"22"},{"size":1441,"mtime":1608468948907,"results":"34","hashOfConfig":"22"},{"size":1221,"mtime":1608468515375,"results":"35","hashOfConfig":"22"},{"size":1290,"mtime":1608468500752,"results":"36","hashOfConfig":"22"},{"size":1481,"mtime":1608719497565,"results":"37","hashOfConfig":"22"},{"size":9011,"mtime":1608799701895,"results":"38","hashOfConfig":"22"},{"size":336,"mtime":1609989780290,"results":"39","hashOfConfig":"22"},{"size":9371,"mtime":1608625731967,"results":"40","hashOfConfig":"22"},{"size":437,"mtime":1608624953091,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1nusfwx",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"44"},"E:\\Projects\\RemindMe\\remind-me-frontend\\src\\index.jsx",[],["96","97"],"E:\\Projects\\RemindMe\\remind-me-frontend\\src\\app.jsx",[],"E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\nav.jsx",["98","99","100"],"import React, { useEffect, useState } from 'react';\r\nimport { Nav, Navbar, Button, Image, NavDropdown } from 'react-bootstrap'\r\nimport axios from 'axios'\r\n\r\nfunction NavBarComponent(props) {\r\n    const [workspace, setWorkspace] = useState([])\r\n    const [user, setUser] = useState({ username: 'sample', email: 'sample@yahoo.com' })\r\n\r\n    useEffect(async () => {\r\n        const { data } = await axios.get(`https://remindme-backend.herokuapp.com/collab/workspace-list/${user.username}/`)\r\n        setWorkspace(data.data)\r\n\r\n    }, [])\r\n\r\n    return (\r\n        < React.Fragment >\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\">\r\n                <Image href=\"#home\" src='https://scontent.fcrk1-2.fna.fbcdn.net/v/t1.15752-9/131931718_157260752821453_8623645780151052973_n.png?_nc_cat=101&ccb=2&_nc_sid=ae9488&_nc_eui2=AeG2fx8500kEy_cqBMGeHvQ4waKzDgjaFtbBorMOCNoW1u8vHCQ4ETcFexSIEO6H1lycqqb_7ccFRca0MNWzFRF7&_nc_ohc=xIK_xf9KeKEAX9U4C4F&_nc_ht=scontent.fcrk1-2.fna&oh=6136d3b442fbc6007faaa46c679f9627&oe=6002E73C' style={{ maxHeight: 45 }}></Image>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#pricing\">Profile</Nav.Link>\r\n                        <Nav.Link href=\"#features\">Reminder</Nav.Link>\r\n                        <NavDropdown title=\"Workspace\" id=\"collasible-nav-dropdown\">\r\n                            {workspace.map(item => <NavDropdown.Item href={`#workspace/${item.id}`} key={item.id}>{item.title}</NavDropdown.Item>)}\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Button variant=\"outline-primary\">Login</Button>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </React.Fragment >\r\n    );\r\n}\r\n\r\nexport default NavBarComponent;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\header.jsx",[],"E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\body.jsx",["101","102","103"],"E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\common\\formClass.jsx",[],"E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspacePage.jsx",["104","105","106"],"import React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport axios from 'axios'\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Sidebar from './workspace/sidebar';\r\nimport Status from './workspace/status';\r\nimport TaskTable from './workspace/taskTable';\r\n\r\n\r\nfunction WorkspacePage(props) {\r\n    const [user, setUser] = useState({ username: 'sample', email: 'sample@yahoo.com' })\r\n\r\n\r\n    useState(async () => {\r\n        try {\r\n            const { data } = await axios.get(`https://remindme-backend.herokuapp.com/collab/workboard-list/${user.username}/1/`)\r\n        } catch (error) {\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Sidebar />\r\n                <Col >\r\n                    <Status />\r\n                    <TaskTable />\r\n\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default WorkspacePage;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\profile.jsx",["107","108","109"],"import React, { useState, useEffect } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Jumbotron, Row, Col, Nav, Button, Image, Form } from 'react-bootstrap'\r\nimport axios from 'axios'\r\n\r\nfunction Profile(props) {\r\n    const [user] = useState({ username: 'sample' })\r\n    const [edit, setEdit] = useState(false)\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [userDetail, setUserDetail] = useState({\r\n        birth_date: \"\",\r\n        email: \"\",\r\n        first_name: \"\",\r\n        gender: \"\",\r\n        id: 0,\r\n        last_name: \"\",\r\n        profile_pic: \"\",\r\n        user: \"\"\r\n    })\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            const { data } = await axios.get(`https://remindme-backend.herokuapp.com/user/details/${user.username}/`)\r\n            setUserDetail(data.data)\r\n        } catch (error) {\r\n        }\r\n    }, [])\r\n\r\n    const handleEdit = async () => {\r\n        if (edit) {\r\n            setEdit(!edit)\r\n            await axios.put(`https://remindme-backend.herokuapp.com/user/details/${user.username}/`, userDetail)\r\n        }\r\n\r\n        setEdit(!edit)\r\n    }\r\n\r\n    const handleChangeDate = (date) => {\r\n        date = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`\r\n\r\n        setUserDetail({ ...userDetail, birth_date: date })\r\n    }\r\n    console.log(userDetail);\r\n    return (\r\n        <Jumbotron>\r\n            <Row>\r\n                <Col xs={3} className='mt-3'>\r\n                    <Image className='w-100' src=\"https://project-management.com/wp-content/uploads/2017/11/robert-kiyosaki.png\" roundedCircle />\r\n                </Col>\r\n                <Col>\r\n                    <Nav className=\"justify-content-end\" activeKey=\"/home\">\r\n                        <Button onClick={() => handleEdit()}>{edit ? 'Save' : 'Edit Profile'}</Button>\r\n                    </Nav>\r\n                    <Row>\r\n                        <Col>\r\n                            <Row>\r\n                                <Col>\r\n                                    <h3>{userDetail.user}</h3>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className='mt-4'>\r\n                                <Col>\r\n                                    <Col>\r\n                                        <h4>{edit ? <React.Fragment>\r\n                                            <Form.Text>First Name</Form.Text>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                placeholder=\"Enter First Name\"\r\n                                                value={userDetail.first_name}\r\n                                                onChange={event => setUserDetail({ ...userDetail, first_name: event.target.value })}\r\n                                            />\r\n                                        </React.Fragment> : `First Name: ${userDetail.first_name}`}</h4>\r\n                                        <h4>{edit ? <React.Fragment>\r\n                                            <Form.Text>Last Name</Form.Text>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                placeholder=\"Enter Last Name\"\r\n                                                value={userDetail.last_name}\r\n                                                onChange={event => setUserDetail({ ...userDetail, last_name: event.target.value })}\r\n                                            />\r\n                                        </React.Fragment> : `Last Name: ${userDetail.last_name}`}</h4>\r\n                                        <h4>Email: {userDetail.email}</h4>\r\n                                    </Col>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Col>\r\n                                        <h4>{edit ? <React.Fragment>\r\n                                            <Form.Text>Gender</Form.Text>\r\n                                            <Form.Control\r\n                                                as=\"select\"\r\n                                                placeholder=\"Enter Gender\"\r\n                                                value={userDetail.gender}\r\n                                                onChange={event => setUserDetail({ ...userDetail, gender: event.target.value })}\r\n                                            >\r\n                                                <option>male</option>\r\n                                                <option>female</option>\r\n                                            </Form.Control>\r\n                                        </React.Fragment> : `Gender: ${userDetail.gender}`}</h4>\r\n                                        <h4>{edit ? <React.Fragment>\r\n                                            <Form.Text>Birthdate</Form.Text>\r\n                                            <Form.Text>(fix not accepting birth_date)</Form.Text>\r\n                                            <DatePicker\r\n                                                selected={startDate}\r\n                                                onChange={date => handleChangeDate(date)}\r\n                                                value={userDetail.birth_date} />\r\n                                        </React.Fragment> : `Birthdate: ${userDetail.birth_date}`}</h4>\r\n                                    </Col>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Jumbotron>\r\n    );\r\n}\r\n\r\nexport default Profile;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\landingPage.jsx",["110","111","112","113","114","115"],"E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\landingPageCommon\\login.jsx",["116","117"],"import React from 'react';\r\nimport { Row, Col, Image, Form } from 'react-bootstrap'\r\nimport FormClass from '../../common/formClass';\r\n\r\n\r\nclass Login extends FormClass {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row className='justify-content-md-center mt-5'>\r\n                    <Image href=\"#home\" src='https://scontent.fcrk1-2.fna.fbcdn.net/v/t1.15752-9/131931718_157260752821453_8623645780151052973_n.png?_nc_cat=101&ccb=2&_nc_sid=ae9488&_nc_eui2=AeG2fx8500kEy_cqBMGeHvQ4waKzDgjaFtbBorMOCNoW1u8vHCQ4ETcFexSIEO6H1lycqqb_7ccFRca0MNWzFRF7&_nc_ohc=xIK_xf9KeKEAX9U4C4F&_nc_ht=scontent.fcrk1-2.fna&oh=6136d3b442fbc6007faaa46c679f9627&oe=6002E73C' style={{ maxHeight: 100 }}></Image>\r\n                </Row>\r\n                <Row className='justify-content-md-center'>\r\n                    <h1>RemindMe</h1>\r\n                </Row>\r\n                <Row className='justify-content-md-center mt-5'>\r\n                    <Form style={{ width: '75%' }}>\r\n\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            {this.renderInput('email', 'Email', 'email')}\r\n                            {this.renderText(\"We'll never share your email with anyone else.\")}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            {this.renderInput('password', 'Password', 'password')}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicCheckbox\">\r\n                            {this.renderCheckBox('checkbox', 'Remember me')}\r\n                        </Form.Group>\r\n\r\n                        <Row>\r\n                            <Col xs lg=\"9\" fluid>\r\n                                {this.renderButton('Login with Facebook', 'primary', true)}\r\n                            </Col>\r\n                            <Col className=''>\r\n                                {this.renderButton('Login', 'primary')}\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Row>\r\n                <Row className='mt-3 text-center'>\r\n                    <Col>\r\n                        <a className='pr-5' href='#'>Register Account</a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a className='pl-5' href='#'>Forgot Password</a>\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n\r\n","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\landingPageCommon\\register.jsx",["118","119"],"import React, { useState } from 'react';\r\nimport { Row, Col, Form, Button } from 'react-bootstrap'\r\nimport axios from 'axios'\r\n\r\n\r\nfunction Register(props) {\r\n    const [user, setUser] = useState({ username: '', email: '', password: '' })\r\n    const [] = useState({ verifiedPassword: ''})\r\n\r\n    const validateButton = () => {\r\n        if (user.password !== user.verifiedPassword) return true\r\n        if (user.password === '') return true\r\n        return false\r\n    }\r\n\r\n    const handleRegister = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { data } = await axios.post('https://remindme-backend.herokuapp.com/auth/register/', user)\r\n        console.log(data);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Row className='justify-content-md-center mt-5'>\r\n                <h1>Register Account</h1>\r\n                <Form style={{ width: '75%' }}>\r\n\r\n                    <Form.Group controlId=\"formBasicUsername\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control value={user.username} onChange={event => setUser({ ...user, username: event.target.value })} type='text' name='username' placeholder='Username'></Form.Control>\r\n                        <Form.Text className=\"text-muted\">Username will be used to display account name</Form.Text >\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control value={user.email} onChange={event => setUser({ ...user, email: event.target.value })} type='email' name='email' placeholder='Email'></Form.Control>\r\n                        <Form.Text className=\"text-muted\">We'll never share your email with anyone else.</Form.Text >\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control value={user.password} onChange={event => setUser({ ...user, password: event.target.value })} type='password' name='password' placeholder='Password'></Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control value={user.verifiedPassword} onChange={event => setUser({ ...user, verifiedPassword: event.target.value })} type='password' name='verifiedPassword' placeholder='Confirm Password'></Form.Control>\r\n                        <Form.Text className=\"text-muted\">Re-enter your password</Form.Text >\r\n                    </Form.Group>\r\n\r\n                    <Row className='mt-5'>\r\n                        <Col xs lg=\"9\" fluid>\r\n                            <a href=\"\" onClick={() => setUser({ username: '', email: '', password: '', verifiedPassword: '' })}>Cancel</a>\r\n                        </Col>\r\n                        <Col className='ml-2'>\r\n                            <Button variant='primary' type=\"submit\" disabled={validateButton()} onClick={event => handleRegister(event)}>Register</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\landingPageCommon\\forgotpass.jsx",["120"],"import React from 'react';\r\nimport { Row, Col, Form } from 'react-bootstrap'\r\nimport FormClass from './../../common/formClass';\r\n\r\n\r\nclass ForgotPass extends FormClass {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row className='justify-content-md-center mt-5'>\r\n                    <h1>Forgot Password</h1>\r\n                    <p>Please enter your valid email address to send reset password</p>\r\n                </Row>\r\n                <Row className='justify-content-md-center mt-5'>\r\n                    <Form style={{ width: '75%' }}>\r\n\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            {this.renderInput('email', 'Email', 'email')}\r\n                            {this.renderText(\"We'll never share your email with anyone else.\")}\r\n                        </Form.Group>\r\n\r\n                        <Row className='mb-4'>\r\n                            <Col xs block fluid>\r\n                                {this.renderButton('Send Password Reset', 'primary', true)}\r\n                            </Col>\r\n                        </Row>\r\n                        <a href=\"\">Cancel</a>\r\n                    </Form>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ForgotPass;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\common\\carouselFunc.jsx",["121","122"],"import React, { useState, useEffect } from 'react';\r\nimport { Carousel } from 'react-bootstrap'\r\n\r\nfunction CarouselFunc({ carouselImages }) {\r\n    const carousel = [\r\n        {\r\n            src: \"https://www.natureindex.com/news-blog/image/5e2f8a77d3ff127d0d116851\",\r\n            alt: \"First slide\",\r\n            title: \"First slide label\",\r\n            detail: \"Nulla vitae elit libero, a pharetra augue mollis interdum.\",\r\n        },\r\n        {\r\n            src: \"https://www.natureindex.com/news-blog/image/5e2f8a77d3ff127d0d116851\",\r\n            alt: \"First slide\",\r\n            title: \"First slide label\",\r\n            detail: \"Nulla vitae elit libero, a pharetra augue mollis interdum.\",\r\n        },\r\n        {\r\n            src: \"https://www.natureindex.com/news-blog/image/5e2f8a77d3ff127d0d116851\",\r\n            alt: \"First slide\",\r\n            title: \"First slide label\",\r\n            detail: \"Nulla vitae elit libero, a pharetra augue mollis interdum.\",\r\n        },\r\n    ]\r\n    return (<Carousel>\r\n        {carousel.map(item => <Carousel.Item interval={1000}>\r\n            <img\r\n                className=\"d-block w-100\"\r\n                src={item.src}\r\n                alt={item.alt}\r\n            />\r\n            <Carousel.Caption>\r\n                <h3>{item.title}</h3>\r\n                <p>{item.detail}</p>\r\n            </Carousel.Caption>\r\n        </Carousel.Item>)}\r\n    </Carousel>\r\n    );\r\n}\r\n\r\nexport default CarouselFunc;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspace\\sidebar.jsx",["123","124","125","126"],"import React, { useState, useEffect } from 'react';\r\nimport { Col, Nav, ListGroup } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios'\r\n\r\nfunction Sidebar(props) {\r\n    const [user, setUser] = useState({ username: 'sample', email: 'sample@yahoo.com' })\r\n    const [workboard, setWorkboard] = useState([])\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            const { data } = await axios.get(`https://remindme-backend.herokuapp.com/collab/workboard-list/${user.username}/1/`)\r\n            setWorkboard(data.data)\r\n        } catch (error) {\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Col xs={2} className='mt-3'>\r\n            <div className=\"row justify-content-end mr-1\" activeKey=\"/home\">\r\n                <FontAwesomeIcon icon={faPlusCircle} size='lg' className='mb-2' style={{ cursor: 'pointer' }} />\r\n            </div>\r\n            <ListGroup defaultActiveKey>\r\n                {workboard.map(board => <ListGroup.Item action href={`#${board.id}`} key={board.id}>{board.title}</ListGroup.Item>)}\r\n            </ListGroup>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspace\\status.jsx",["127","128","129","130"],"import React, { useEffect, useState } from 'react';\r\nimport { Nav, Row, Col } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios'\r\n\r\n\r\nfunction Status(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row justify-content-end mr-1\" activeKey=\"/home\">\r\n                <FontAwesomeIcon icon={faCog} size='lg' className='mb-2' />\r\n            </div>\r\n            <Row>\r\n                <Col xs={2}>Graph</Col>\r\n                <Col>\r\n                    <Row className='ml-5'>\r\n                        <Col >\r\n                            <Row>Queue: </Row>\r\n                            <Row>On-going: </Row>\r\n                            <Row>Stuck: </Row>\r\n                            <Row>Done: </Row>\r\n                            <Row>Progress: </Row>\r\n                        </Col>\r\n                        <Col >\r\n                            <Row>Total Members: </Row>\r\n                            <Row>Total Task</Row>\r\n                            <Row>Privacy: </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Status;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspace\\taskTable.jsx",["131"],"import React, { useState, useEffect } from 'react';\r\nimport { Table, Row } from 'react-bootstrap'\r\nimport axios from 'axios'\r\nimport TaskBody from './taskBody';\r\n\r\nfunction TaskTable(props) {\r\n    const [taskGroup, setTaskGroup] = useState([])\r\n    const [tableHeader] = useState([\r\n        { id: 1, label: 'Task' },\r\n        { id: 2, label: 'Status' },\r\n        { id: 3, label: 'Comment' },\r\n        { id: 4, label: 'People' },\r\n        { id: 5, label: 'Due Date' },\r\n    ])\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            const { data } = await axios.get('https://remindme-backend.herokuapp.com/collab/taskgroup-list/sample/1/1/')\r\n            setTaskGroup(data.data)\r\n        } catch (error) {\r\n\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Row className='mt-4'>\r\n            {taskGroup.map(group =>\r\n                <React.Fragment key={group.id}>\r\n                    <h3>{group.title}</h3>\r\n                    <Table striped bordered hover >\r\n                        <thead>\r\n                            <tr>\r\n                                {tableHeader.map(tableHead => <th key={tableHead.id}>{tableHead.label}</th>)}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <TaskBody taskGroupId={group.id} />\r\n                        </tbody>\r\n                    </Table>\r\n                </React.Fragment>\r\n            )}\r\n\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default TaskTable;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\workspace\\taskBody.jsx",["132","133","134","135"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCommentDots, faUserCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { Button, Col, Form, Overlay, Popover } from 'react-bootstrap'\r\nimport axios from 'axios'\r\n\r\n\r\nfunction TaskBody({ taskGroupId }) {\r\n    const leader = true\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [task, setTask] = useState([])\r\n    const [getComment, setGetComment] = useState([])\r\n    const [getPeople, setGetPeople] = useState([])\r\n    const [addComment, setAddComment] = useState({ comment: \"\" })\r\n\r\n    const [showComment, setShowComment] = useState(false);\r\n    const [targetComment, setTargetComment] = useState(null);\r\n    const refComment = useRef(null);\r\n\r\n    const [showPeople, setShowPeople] = useState(false);\r\n    const [targetPeople, setTargetPeople] = useState(null);\r\n    const refPeople = useRef(null);\r\n\r\n\r\n    const handlePeopleButton = (event, taskItem) => {\r\n        !showPeople ? setGetPeople([...taskItem.people]) : setGetPeople([])\r\n        setShowComment(false);\r\n        setGetComment([])\r\n        setShowPeople(!showPeople);\r\n        setTargetPeople(event.target);\r\n    };\r\n\r\n    const handleCommentButton = (event, taskItem) => {\r\n        !showComment ? handleGetComments(taskItem) : setGetComment([])\r\n        setShowPeople(false);\r\n        setGetPeople([])\r\n        setShowComment(!showComment);\r\n        setTargetComment(event.target);\r\n    };\r\n\r\n    const handleDeleteButton = async (taskItem) => {\r\n        const updatedComments = getComment.filter(comment => comment.id !== taskItem.id)\r\n        setGetComment(updatedComments)\r\n        const { data } = await axios.delete(`https://remindme-backend.herokuapp.com/collab/task-comment-detail/sample/1/1/1/1/${taskItem.id}/`)\r\n    }\r\n\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            const { data } = await axios.get(`https://remindme-backend.herokuapp.com/collab/task-list/sample/1/1/${taskGroupId}/`)\r\n            setTask(data.data)\r\n        } catch (error) {\r\n        }\r\n    }, [])\r\n\r\n    const handleUpdate = async (taskItem) => {\r\n        try {\r\n            await axios.put(`https://remindme-backend.herokuapp.com/collab/task-detial/sample/1/1/${taskGroupId}/${taskItem.id}/`, taskItem)\r\n        } catch (error) {\r\n        }\r\n    }\r\n\r\n    const handleGetComments = async (taskItem) => {\r\n        try {\r\n            const { data } = await axios.get(`https://remindme-backend.herokuapp.com/collab/task-comment-list/sample/1/1/1/${taskItem.id}/`)\r\n            setGetComment(data.data)\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    const handleAddComment = async () => {\r\n        try {\r\n            setGetComment([...getComment, addComment])\r\n            setAddComment({ comment: '' })\r\n            await axios.post(`https://remindme-backend.herokuapp.com/collab/task-comment-list/sample/1/1/1/1/${addComment.id}/`, addComment)\r\n            console.log('craeted comment');\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    const handleChangeStatus = (status, taskItem) => {\r\n        taskItem.status = status.currentTarget.value\r\n        const index = task.indexOf(taskItem)\r\n        const items = [...task]\r\n        items[index] = taskItem\r\n        setTask([...items])\r\n\r\n        handleUpdate(taskItem)\r\n    }\r\n\r\n    const handleChangeDate = (date, taskItem) => {\r\n        taskItem.due_date = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`\r\n        const index = task.indexOf(taskItem)\r\n        const items = [...task]\r\n        items[index] = taskItem\r\n        setTask([...items])\r\n\r\n        handleUpdate(taskItem)\r\n    }\r\n\r\n    const handleTaskChange = (event, taskItem) => {\r\n        taskItem.task = event.currentTarget.value\r\n        const index = task.indexOf(taskItem)\r\n        const items = [...task]\r\n        items[index] = taskItem\r\n        setTask([...items])\r\n    }\r\n\r\n    const handleBlur = (taskItem) => {\r\n        handleUpdate(taskItem)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {task.map(taskItem =>\r\n                <tr key={taskItem.id}>\r\n                    <td>{leader ?\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Enter task\"\r\n                            value={taskItem.task}\r\n                            onBlur={handleBlur(taskItem)}\r\n                            onChange={event => handleTaskChange(event, taskItem)}\r\n                        /> : taskItem.task}</td>\r\n                    <td>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            custom className={`text-white bg-${getStatus(`${taskItem.status}`)}`}\r\n                            value={`${taskItem.status}`}\r\n                            onChange={(event) => handleChangeStatus(event, taskItem)}>\r\n                            <option className='bg-white text-dark'>queue</option>\r\n                            <option className='bg-white text-dark'>on-going</option>\r\n                            <option className='bg-white text-dark'>stuck</option>\r\n                            <option className='bg-white text-dark'>done</option>\r\n                        </Form.Control>\r\n                    </td>\r\n                    <td>\r\n                        <FontAwesomeIcon\r\n                            style={{ cursor: 'pointer' }}\r\n                            icon={faCommentDots}\r\n                            size='lg'\r\n                            ref={refComment}\r\n                            onClick={event => handleCommentButton(event, taskItem)}\r\n                        /></td>\r\n                    <td>\r\n                        <FontAwesomeIcon\r\n                            style={{ cursor: 'pointer' }}\r\n                            icon={faUserCircle}\r\n                            size='lg'\r\n                            ref={refPeople}\r\n                            onClick={event => handlePeopleButton(event, taskItem)}\r\n                        />\r\n                    </td>\r\n                    <td><DatePicker\r\n                        selected={startDate}\r\n                        onChange={date => handleChangeDate(date, taskItem)}\r\n                        value={taskItem.due_date} /></td>\r\n                </tr>\r\n            )}\r\n\r\n            <Overlay\r\n                show={showComment}\r\n                target={targetComment}\r\n                placement=\"bottom\"\r\n                container={refComment.current}\r\n                containerPadding={20}\r\n            >\r\n                <Popover id=\"popover-contained\">\r\n                    <Popover.Title as=\"h3\">Comments:</Popover.Title>\r\n                    <Col>\r\n                        <Form.Control type='text' value={addComment.comment} onChange={event => setAddComment({ comment: event.target.value })} size='sm' placeholder='Input comment' />\r\n                        <Button className='mt-2' onClick={handleAddComment}>Send</Button>\r\n                    </Col>\r\n                    {getComment.length > 0 ?\r\n                        getComment.map(taskItem => <Popover.Content key={taskItem.id}>\r\n                            <strong>{taskItem.comment}</strong>\r\n                            <br />\r\n                            - (fix backend for getting username).\r\n                            <FontAwesomeIcon\r\n                                style={{ cursor: 'pointer' }}\r\n                                icon={faTrashAlt}\r\n                                size='lg'\r\n                                ref={refPeople}\r\n                                className='ml-1 text-danger'\r\n                                onClick={() => handleDeleteButton(taskItem)}\r\n                            />\r\n                            <hr />\r\n                        </Popover.Content>)\r\n                        : <Popover.Content>0 comments</Popover.Content>\r\n                    }\r\n                </Popover>\r\n            </Overlay>\r\n\r\n            <Overlay\r\n                show={showPeople}\r\n                target={targetPeople}\r\n                placement=\"bottom\"\r\n                container={refPeople.current}\r\n                containerPadding={20}\r\n            >\r\n                <Popover id=\"popover-contained\">\r\n                    <Popover.Title as=\"h3\">People:</Popover.Title>\r\n                    {getPeople.length > 0 ?\r\n                        getPeople.map(user => <Popover.Content as=\"h6\" key={user.id}>{user.username}</Popover.Content>)\r\n                        : <Popover.Content>No user assigned</Popover.Content>\r\n                    }\r\n                </Popover>\r\n            </Overlay>\r\n        </React.Fragment >\r\n    );\r\n}\r\n\r\nconst getStatus = (status) => {\r\n    if (status === 'queue') return 'secondary';\r\n    if (status === 'on-going') return 'primary';\r\n    if (status === 'stuck') return 'danger';\r\n    if (status === 'done') return 'success';\r\n}\r\n\r\n\r\nexport default TaskBody;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\todoPage.jsx",["136"],"E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\todoPage\\todo.jsx",["137","138","139"],"import React, { useState, useEffect } from 'react';\r\nimport { Container, Modal, Button, Form, Table, Row, Col } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusCircle, faEdit, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios'\r\n\r\nfunction Todo(props) {\r\n    let lastId = 0\r\n    const [todo, setTodo] = useState([])\r\n    const [newTask, setNewTask] = useState({ title: '', complete: false })\r\n    const [editTask, setEditTask] = useState({ id: 0, title: '', complete: false, date_created: '0000-00-00T00:00:00.000000Z' })\r\n    const [showCreate, setShowCreate] = useState(false);\r\n    const [showEdit, setShowEdit] = useState(false);\r\n    const [showDelete, setShowDelete] = useState(false);\r\n    const [edit, setEdit] = useState(false)\r\n\r\n    // Server call functions\r\n    useEffect(async () => {\r\n        const { data } = await axios.get('https://remindme-backend.herokuapp.com/todo/list/sample/')\r\n        setTodo(data.data)\r\n    }, [])\r\n\r\n    const handleUpdate = async (task) => {\r\n        try {\r\n            await axios.put(`https://remindme-backend.herokuapp.com/todo/list/sample/${task.id}/`, task)\r\n        } catch (error) {\r\n        }\r\n    }\r\n\r\n    const handleCreateTask = async () => {\r\n        try {\r\n            setTodo([...todo, newTask])\r\n            handleCloseCreate()\r\n            await axios.post('https://remindme-backend.herokuapp.com/todo/list/sample/', newTask)\r\n            setNewTask({ title: '', complete: false })\r\n        } catch (error) {\r\n        }\r\n    }\r\n\r\n    const handleDeleteTask = async (task) => {\r\n        try {\r\n            await axios.delete(`https://remindme-backend.herokuapp.com/todo/list/sample/${task.id}/`)\r\n        } catch (error) {\r\n        }\r\n    }\r\n\r\n\r\n    // Modal functions\r\n    const handleCloseCreate = () => setShowCreate(false);\r\n    const handleShowCreate = () => setShowCreate(true);\r\n\r\n    const handleCloseEdit = () => {\r\n        setEditTask({ id: 0, title: '', complete: false, date_created: '0000-00-00T00:00:00.000000Z' })\r\n        setShowEdit(false)\r\n    };\r\n\r\n    const handleShowEdit = (task) => {\r\n        setEditTask(task)\r\n        setShowEdit(true)\r\n    };\r\n\r\n    const handleCloseDelete = () => {\r\n        setEditTask({ id: 0, title: '', complete: false, date_created: '0000-00-00T00:00:00.000000Z' })\r\n        setShowDelete(false)\r\n    };\r\n\r\n    const handleShowDelete = (task) => {\r\n        setEditTask(task)\r\n        setShowDelete(true)\r\n    };\r\n\r\n\r\n    // Functions\r\n    const handleEditTask = (event, task) => {\r\n        const index = todo.indexOf(task)\r\n        const tasks = [...todo]\r\n        task.title = event.currentTarget.value\r\n        tasks[index] = task\r\n        setTodo([...tasks])\r\n    }\r\n\r\n    const handleEdit = () => {\r\n        handleUpdate(editTask)\r\n        handleCloseEdit()\r\n\r\n        const index = todo.indexOf()\r\n        const tasks = [...todo]\r\n        tasks.map(task =>\r\n            task.id == editTask.id ? task.title = editTask.title : task\r\n        )\r\n        setTodo([...tasks])\r\n\r\n        setEditTask({ id: 0, title: '', complete: false, date_created: '0000-00-00T00:00:00.000000Z' })\r\n    }\r\n\r\n\r\n    const handleDelete = () => {\r\n        handleDeleteTask(editTask)\r\n        handleCloseDelete()\r\n        const tasks = todo.filter(task => task.id !== editTask.id)\r\n        setTodo([...tasks])\r\n\r\n        setEditTask({ id: 0, title: '', complete: false, date_created: '0000-00-00T00:00:00.000000Z' })\r\n    }\r\n\r\n    const handleSave = () => {\r\n        if (edit) todo.map(task => handleUpdate(task))\r\n        setEdit(!edit)\r\n    }\r\n\r\n    const handleClick = (task) => {\r\n        const index = todo.indexOf(task)\r\n        const tasks = [...todo]\r\n        task.complete = !task.complete\r\n        tasks[index] = task\r\n        setTodo([...tasks])\r\n\r\n        handleUpdate(task)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"nav justify-content-end\">\r\n                <button className='border border-light'>\r\n                    <FontAwesomeIcon icon={faPlusCircle} size='lg' onClick={handleShowCreate} />\r\n                </button>\r\n                <Button className='mb-1 ml-2' onClick={handleSave}>{edit ? 'Save All' : 'Edit All'}</Button>\r\n            </div>\r\n            <Table striped bordered hover variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>No.</th>\r\n                        <th>Task</th>\r\n                        <th className=\"nav justify-content-end pr-5\">Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {todo.map(task =>\r\n                        <tr key={task.id}>\r\n                            <td>{++lastId}</td>\r\n                            <td>{edit ?\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    size=\"sm\"\r\n                                    placeholder={task.title}\r\n                                    onBlur={event => handleEditTask(event, task)}>\r\n                                </Form.Control>\r\n                                : task.title}\r\n                            </td>\r\n                            <td className=\"nav justify-content-end\">\r\n                                <Form.Check\r\n                                    checked={task.complete}\r\n                                    className='pr-1'\r\n                                    onChange={() => handleClick(task)}\r\n                                />\r\n                                <FontAwesomeIcon\r\n                                    icon={faEdit}\r\n                                    size='lg'\r\n                                    onClick={() => handleShowEdit(task)} style={{ cursor: 'pointer' }}\r\n                                />\r\n                                <FontAwesomeIcon\r\n                                    icon={faTimesCircle}\r\n                                    size='lg'\r\n                                    onClick={() => handleShowDelete(task)} style={{ cursor: 'pointer' }}\r\n                                    className='text-danger ml-1'\r\n                                />\r\n                            </td>\r\n                        </tr>)\r\n                    }\r\n\r\n                </tbody>\r\n            </Table>\r\n\r\n            <Modal\r\n                show={showCreate}\r\n                onHide={handleCloseCreate}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n                size='lg'\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Creating new Task</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Control placeholder='Enter Task Name' value={newTask.title} onChange={event => setNewTask({ ...newTask, 'title': event.target.value })} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleCloseCreate}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleCreateTask}>Create</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal\r\n                show={showEdit}\r\n                onHide={handleCloseCreate}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n                size='lg'\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Edit: {editTask.title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Control placeholder='Enter Task Name' value={editTask.title} onChange={event => setEditTask({ ...editTask, 'title': event.target.value })} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleCloseEdit}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleEdit}>Save</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            <Modal\r\n                show={showDelete}\r\n                onHide={handleCloseDelete}\r\n                backdrop=\"static\"\r\n                keyboard={false}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Delete: {editTask.title}</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    <p>Are you sure you want to delete {editTask.title}?</p>\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => setShowDelete(false)}>Close</Button>\r\n                    <Button variant=\"danger\" onClick={handleDelete}>Delete</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Todo;","E:\\Projects\\RemindMe\\remind-me-frontend\\src\\components\\pages\\todoPage\\todoTask.jsx",["140","141","142"],"import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron } from 'react-bootstrap'\r\n\r\nfunction TodoTask(props) {\r\n    const [todo, setTodo] = useState({\r\n        id: 6,\r\n        title: \"New task created in frontend\",\r\n        date_created: \"2020-12-22T08:06:11.444620Z\",\r\n        complete: false,\r\n        tasks: []\r\n    })\r\n\r\n    return (\r\n        <Jumbotron>\r\n\r\n        </Jumbotron>\r\n    );\r\n}\r\n\r\nexport default TodoTask;",{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":7,"column":18,"nodeType":"149","messageId":"150","endLine":7,"endColumn":25},{"ruleId":"151","severity":1,"message":"152","line":9,"column":15,"nodeType":"153","endLine":13,"endColumn":6},{"ruleId":"151","severity":1,"message":"154","line":13,"column":8,"nodeType":"155","endLine":13,"endColumn":10,"suggestions":"156"},{"ruleId":"147","severity":1,"message":"157","line":3,"column":8,"nodeType":"149","messageId":"150","endLine":3,"endColumn":12},{"ruleId":"147","severity":1,"message":"158","line":4,"column":8,"nodeType":"149","messageId":"150","endLine":4,"endColumn":21},{"ruleId":"147","severity":1,"message":"159","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":15},{"ruleId":"147","severity":1,"message":"160","line":1,"column":27,"nodeType":"149","messageId":"150","endLine":1,"endColumn":36},{"ruleId":"147","severity":1,"message":"148","line":12,"column":18,"nodeType":"149","messageId":"150","endLine":12,"endColumn":25},{"ruleId":"147","severity":1,"message":"161","line":17,"column":21,"nodeType":"149","messageId":"150","endLine":17,"endColumn":25},{"ruleId":"147","severity":1,"message":"162","line":9,"column":23,"nodeType":"149","messageId":"150","endLine":9,"endColumn":35},{"ruleId":"151","severity":1,"message":"152","line":21,"column":15,"nodeType":"153","endLine":27,"endColumn":6},{"ruleId":"151","severity":1,"message":"154","line":27,"column":8,"nodeType":"155","endLine":27,"endColumn":10,"suggestions":"163"},{"ruleId":"147","severity":1,"message":"164","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":25},{"ruleId":"147","severity":1,"message":"160","line":1,"column":27,"nodeType":"149","messageId":"150","endLine":1,"endColumn":36},{"ruleId":"147","severity":1,"message":"165","line":2,"column":31,"nodeType":"149","messageId":"150","endLine":2,"endColumn":39},{"ruleId":"147","severity":1,"message":"166","line":3,"column":8,"nodeType":"149","messageId":"150","endLine":3,"endColumn":13},{"ruleId":"147","severity":1,"message":"167","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":18},{"ruleId":"147","severity":1,"message":"168","line":7,"column":8,"nodeType":"149","messageId":"150","endLine":7,"endColumn":13},{"ruleId":"169","severity":1,"message":"170","line":44,"column":25,"nodeType":"171","endLine":44,"endColumn":54},{"ruleId":"169","severity":1,"message":"170","line":47,"column":25,"nodeType":"171","endLine":47,"endColumn":54},{"ruleId":"172","severity":1,"message":"173","line":8,"column":11,"nodeType":"174","messageId":"175","endLine":8,"endColumn":13},{"ruleId":"169","severity":1,"message":"170","line":53,"column":29,"nodeType":"171","endLine":53,"endColumn":129},{"ruleId":"169","severity":1,"message":"170","line":27,"column":25,"nodeType":"171","endLine":27,"endColumn":36},{"ruleId":"147","severity":1,"message":"164","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":25},{"ruleId":"147","severity":1,"message":"160","line":1,"column":27,"nodeType":"149","messageId":"150","endLine":1,"endColumn":36},{"ruleId":"147","severity":1,"message":"176","line":2,"column":15,"nodeType":"149","messageId":"150","endLine":2,"endColumn":18},{"ruleId":"147","severity":1,"message":"148","line":8,"column":18,"nodeType":"149","messageId":"150","endLine":8,"endColumn":25},{"ruleId":"151","severity":1,"message":"152","line":11,"column":15,"nodeType":"153","endLine":17,"endColumn":6},{"ruleId":"151","severity":1,"message":"154","line":17,"column":8,"nodeType":"155","endLine":17,"endColumn":10,"suggestions":"177"},{"ruleId":"147","severity":1,"message":"160","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":26},{"ruleId":"147","severity":1,"message":"164","line":1,"column":28,"nodeType":"149","messageId":"150","endLine":1,"endColumn":36},{"ruleId":"147","severity":1,"message":"176","line":2,"column":10,"nodeType":"149","messageId":"150","endLine":2,"endColumn":13},{"ruleId":"147","severity":1,"message":"168","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":16,"column":15,"nodeType":"153","endLine":23,"endColumn":6},{"ruleId":"147","severity":1,"message":"162","line":11,"column":23,"nodeType":"149","messageId":"150","endLine":11,"endColumn":35},{"ruleId":"147","severity":1,"message":"161","line":45,"column":17,"nodeType":"149","messageId":"150","endLine":45,"endColumn":21},{"ruleId":"151","severity":1,"message":"152","line":49,"column":15,"nodeType":"153","endLine":55,"endColumn":6},{"ruleId":"151","severity":1,"message":"178","line":55,"column":8,"nodeType":"155","endLine":55,"endColumn":10,"suggestions":"179"},{"ruleId":"147","severity":1,"message":"180","line":4,"column":8,"nodeType":"149","messageId":"150","endLine":4,"endColumn":16},{"ruleId":"151","severity":1,"message":"152","line":18,"column":15,"nodeType":"153","endLine":21,"endColumn":6},{"ruleId":"147","severity":1,"message":"181","line":86,"column":15,"nodeType":"149","messageId":"150","endLine":86,"endColumn":20},{"ruleId":"182","severity":1,"message":"183","line":89,"column":21,"nodeType":"184","messageId":"175","endLine":89,"endColumn":23},{"ruleId":"147","severity":1,"message":"160","line":1,"column":27,"nodeType":"149","messageId":"150","endLine":1,"endColumn":36},{"ruleId":"147","severity":1,"message":"185","line":5,"column":12,"nodeType":"149","messageId":"150","endLine":5,"endColumn":16},{"ruleId":"147","severity":1,"message":"186","line":5,"column":18,"nodeType":"149","messageId":"150","endLine":5,"endColumn":25},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'user.username'. Either include it or remove the dependency array.","ArrayExpression",["189"],"'ToDo' is defined but never used.","'WorkspacePage' is defined but never used.","'Profile' is defined but never used.","'useEffect' is defined but never used.","'data' is assigned a value but never used.","'setStartDate' is assigned a value but never used.",["190"],"'useState' is defined but never used.","'Carousel' is defined but never used.","'Login' is defined but never used.","'ForgotPass' is defined but never used.","'axios' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-empty-pattern","Unexpected empty array pattern.","ArrayPattern","unexpected","'Nav' is defined but never used.",["191"],"React Hook useEffect has a missing dependency: 'taskGroupId'. Either include it or remove the dependency array.",["192"],"'TodoTask' is defined but never used.","'index' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'todo' is assigned a value but never used.","'setTodo' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"193","fix":"194"},{"desc":"193","fix":"195"},{"desc":"193","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [user.username]",{"range":"199","text":"200"},{"range":"201","text":"200"},{"range":"202","text":"200"},"Update the dependencies array to be: [taskGroupId]",{"range":"203","text":"204"},[530,532],"[user.username]",[876,878],[695,697],[2176,2178],"[taskGroupId]"]